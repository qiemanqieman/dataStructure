#include "maze.h"

#define R  9
#define C  9



int main()
{
//    int mat[R][L] = {
//            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
//            1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1,
//            1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1,
//            1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1,
//            1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1,
//            1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1,
//            1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1,
//            1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1,
//            1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1,
//            1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1,
//            1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1,
//            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1

//    };

    int mat[R][C] =
//            {
//            0, 1, 1, 1,
//            0, 0, 0, 0,
//            1, 0, 1, 1,
//            0, 0, 0, 0
//    };
            {
                    { 0, 0, 0, 1, 0, 0, 0, 0, 0},
                    { 0, 1, 0, 1, 0, 0, 0, 0, 0},
                    { 1, 0, 0, 1, 0, 0, 0, 0, 0},
                    { 0, 0, 1, 0, 0, 0, 0, 0, 0},
                    { 0, 1, 0, 0, 1, 0, 0, 0, 0},
                    { 0, 0, 0, 1, 0, 0, 0, 0, 0},
                    { 0, 0, 0, 1, 0, 0, 1, 1, 1},
                    { 0, 0, 0, 1, 0, 0, 0, 0, 0},
                    { 0, 0, 0, 1, 0, 0, 0, 0, 0}
            };
    int **matrix = new int*[R];
    for (int i = 0; i < R; ++i){
        matrix[i] = mat[i];
    }
    maze m(matrix, R, C);

    int length = m.find_shortest_way();
    if (length != -1)
        std::cout << "\nlength of shortest way: " << length << std::endl;
    return 0;

}
